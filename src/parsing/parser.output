Nonterminals useless in grammar

   type
   array_length
   function_result
   function_parameters
   function_parameter_list
   struct_field_decls
   identifier_list


Terminals unused in grammar

   BOOL
   INT
   FLOAT32
   COMPLEX64
   BYTE
   RUNE
   STRING
   STRUCT
   FUNC
   MAP
   IDENTIFIER
   '('
   ')'
   '['
   ']'
   '{'
   '}'
   '*'
   ','
   ';'


Rules useless in grammar

    6 type: IDENTIFIER
    7     | '(' type ')'
    8     | BOOL
    9     | INT
   10     | FLOAT32
   11     | RUNE
   12     | STRING
   13     | '[' array_length ']' type
   14     | '[' ']' type
   15     | STRUCT '{' struct_field_decls '}'
   16     | '*' type
   17     | FUNC function_parameters function_result
   18     | MAP '[' type ']' type

   19 array_length: INT_LITERAL

   20 function_result: /* empty */
   21                | function_parameters
   22                | type

   23 function_parameters: '(' ')'
   24                    | '(' function_parameter_list ')'
   25                    | '(' function_parameter_list ',' ')'

   26 function_parameter_list: type
   27                        | identifier_list type
   28                        | type ',' function_parameter_list
   29                        | identifier_list type ',' function_parameter_list

   30 struct_field_decls: identifier_list type ';'
   31                   | identifier_list type ';' struct_field_decls

   32 identifier_list: IDENTIFIER
   33                | IDENTIFIER ',' identifier_list


Grammar

    0 $accept: start $end

    1 start: expression

    2 expression: BOOL_LITERAL
    3           | INT_LITERAL
    4           | FLOAT_LITERAL
    5           | RUNE_LITERAL


Terminals, with rules where they appear

$end (0) 0
'(' (40)
')' (41)
'*' (42)
',' (44)
';' (59)
'[' (91)
']' (93)
'{' (123)
'}' (125)
error (256)
BOOL (258)
INT (259)
FLOAT32 (260)
COMPLEX64 (261)
BYTE (262)
RUNE (263)
STRING (264)
STRUCT (265)
FUNC (266)
MAP (267)
IDENTIFIER (268)
INT_LITERAL (269) 3
FLOAT_LITERAL (270) 4
BOOL_LITERAL (271) 2
RUNE_LITERAL (272) 5


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
start (28)
    on left: 1, on right: 0
expression (29)
    on left: 2 3 4 5, on right: 1


State 0

    0 $accept: . start $end

    INT_LITERAL    shift, and go to state 1
    FLOAT_LITERAL  shift, and go to state 2
    BOOL_LITERAL   shift, and go to state 3
    RUNE_LITERAL   shift, and go to state 4

    start       go to state 5
    expression  go to state 6


State 1

    3 expression: INT_LITERAL .

    $default  reduce using rule 3 (expression)


State 2

    4 expression: FLOAT_LITERAL .

    $default  reduce using rule 4 (expression)


State 3

    2 expression: BOOL_LITERAL .

    $default  reduce using rule 2 (expression)


State 4

    5 expression: RUNE_LITERAL .

    $default  reduce using rule 5 (expression)


State 5

    0 $accept: start . $end

    $end  shift, and go to state 7


State 6

    1 start: expression .

    $default  reduce using rule 1 (start)


State 7

    0 $accept: start $end .

    $default  accept
